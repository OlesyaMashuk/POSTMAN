{
	"info": {
		"_postman_id": "923ae1b4-ab5d-4374-8b61-08858275d9ab",
		"name": "29_HW_2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Отправить запрос.\r",
							"// Статус код 200\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Проверить, что в body приходит правильный string.\r",
							"pm.test(\"Body is correct\", function () {\r",
							"    pm.response.to.have.body(\"This is the first responce from server!\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}:{{port}}/first",
					"host": [
						"{{url}}"
					],
					"port": "{{port}}",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Отправить запрос.\r",
							"// Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Спарсить response body в json\r",
							"let jsonData = pm.response.json();\r",
							"// вывести в консоль\r",
							"console.log(jsonData)\r",
							"\r",
							"//Проверить, что name в ответе равно name s request (name вбить руками)\r",
							"let resp_name = jsonData.name\r",
							"pm.test(\"Check name manual\", function () {\r",
							"    pm.expect(resp_name).to.eql(\"Rita\")\r",
							"});\r",
							"\r",
							"// Проверить, что age в ответе равно age s request (age вбить руками.)\r",
							"let resp_age = +jsonData.age\r",
							"pm.test(\"Check age manual\", function () {\r",
							"    pm.expect(+resp_age).to.eql(35)\r",
							"});\r",
							"\r",
							"// Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
							"let resp_salary = jsonData.salary\r",
							"pm.test(\"Check salary manual\", function () {\r",
							"    pm.expect(resp_salary).to.eql(1500)\r",
							"});\r",
							"\r",
							"// Спарсить request\r",
							"let reqData = request.data;\r",
							"// вывести в консоль\r",
							"console.log(reqData)\r",
							"\r",
							"// Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"let req_name = reqData.name\r",
							"pm.test(\"Check name\", function () {\r",
							"    pm.expect(resp_name).to.eql(req_name)\r",
							"});\r",
							"\r",
							"// Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"let req_age = reqData.age\r",
							"pm.test(\"Check age\", function () {\r",
							"    pm.expect(+resp_age).to.eql(+req_age)\r",
							"});\r",
							"\r",
							"// Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"let req_salary = reqData.salary\r",
							"pm.test(\"Check salary\", function () {\r",
							"    pm.expect(+resp_salary).to.eql(+req_salary)\r",
							"});\r",
							"\r",
							"// Вывести в консоль параметр family из response\r",
							"console.log(jsonData.family)\r",
							"\r",
							"// Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"let salary_1_5 = jsonData.family.u_salary_1_5_year\r",
							"pm.test(\"Check u_salary_1_5_year\", function () {\r",
							"    pm.expect(salary_1_5).to.eql(req_salary*4)\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Rita",
							"type": "text"
						},
						{
							"key": "age",
							"value": "35",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1500",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}:{{port}}/user_info_3",
					"host": [
						"{{url}}"
					],
					"port": "{{port}}",
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Отправить запрос.\r",
							"// Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Спарсить response body в json\r",
							"let jsonData = pm.response.json();\r",
							"\r",
							"// Спарсить request\r",
							"let reqData = request.data;\r",
							"\r",
							"// Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test(\"Check 'start_qa_salary'\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"start_qa_salary\")\r",
							"});\r",
							"\r",
							"\r",
							"// Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test(\"Check 'qa_salary_after_6_months'\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_6_months\")\r",
							"});\r",
							"\r",
							"// Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test(\"Check 'qa_salary_after_12_months'\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_12_months\")\r",
							"});\r",
							"\r",
							"// Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.test(\"Check 'qa_salary_after_1.5_year'\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_1.5_year\")\r",
							"});\r",
							"\r",
							"// Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test(\"Check 'qa_salary_after_3.5_years'\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_3.5_years\")\r",
							"});\r",
							"\r",
							"// Проверить, что json response имеет параметр person\r",
							"pm.test(\"Check 'person'\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"person\")\r",
							"});\r",
							"\r",
							"// Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"Check start_qa_salary=salary\", function () {\r",
							"    pm.expect(jsonData.start_qa_salary).to.eql(+reqData.salary)\r",
							"});\r",
							"\r",
							"// Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"Check qa_salary_after_6_months=salary*2\", function () {\r",
							"    pm.expect(jsonData.qa_salary_after_6_months).to.eql(+reqData.salary*2)\r",
							"});\r",
							"\r",
							"// Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"pm.test(\"Check qa_salary_after_12_months=salary*2.7\", function () {\r",
							"    pm.expect(jsonData.qa_salary_after_12_months).to.eql(+reqData.salary*2.7)\r",
							"});\r",
							"\r",
							"// Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"pm.test(\"Check qa_salary_after_1.5_year=salary*3.3\", function () {\r",
							"    pm.expect(jsonData['qa_salary_after_1.5_year']).to.eql(+reqData.salary*3.3)\r",
							"});\r",
							"\r",
							"// Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"pm.test(\"Check qa_salary_after_3.5_yearsr=salary*3.8\", function () {\r",
							"    pm.expect(jsonData['qa_salary_after_3.5_years']).to.eql(+reqData.salary*3.8)\r",
							"});\r",
							"\r",
							"// Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"pm.test(\"Check u_name1=salary\", function () {\r",
							"    pm.expect(jsonData.person.u_name[1]).to.eql(+reqData.salary)\r",
							"});\r",
							"\r",
							"// Проверить, что параметр u_age равен age из request (age забрать из request.)\r",
							"pm.test(\"Check u_age=age\", function () {\r",
							"    pm.expect(+jsonData.person.u_age).to.eql(+reqData.age)\r",
							"});\r",
							"\r",
							"// Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"pm.test(\"Check u_salary_5_years=salary*4.2\", function () {\r",
							"    pm.expect(+jsonData.person.u_salary_5_years).to.eql(+reqData.salary*4.2)\r",
							"});\r",
							"\r",
							"// Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"for (let i in jsonData.person)\r",
							"console.log(i,jsonData.person[i])\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Tanya",
							"type": "text"
						},
						{
							"key": "age",
							"value": "33",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1500",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}:{{port}}/user_info_2",
					"host": [
						"{{url}}"
					],
					"port": "{{port}}",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Отправить запрос.\r",
							"// Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Спарсить response body в json\r",
							"let jsonData = pm.response.json()\r",
							"\r",
							"//Спарсить request\r",
							"let reqData = pm.request.url.query.toObject()\r",
							"\r",
							"// Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"let resp_name = jsonData.name\r",
							"let req_name = reqData.name\r",
							"pm.test(\"Check name\", function () {\r",
							"    pm.expect(resp_name).to.eql(req_name)\r",
							"});\r",
							"\r",
							"// Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"let resp_age = Number(jsonData.age)\r",
							"let req_age = Number(reqData.age)\r",
							"pm.test(\"Check age\", function () {\r",
							"    pm.expect(resp_age).to.eql(req_age)\r",
							"});\r",
							"\r",
							"// Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"let req_salary = Number(reqData.salary)\r",
							"let resp_salary = Number(jsonData.salary)\r",
							"pm.test(\"Check salary\", function () {\r",
							"    pm.expect(resp_salary).to.eql(req_salary)\r",
							"});\r",
							"\r",
							"// Вывести в консоль параметр family из response\r",
							"console.log(jsonData.family)\r",
							"\r",
							"// Проверить, что у параметра dog есть параметры name\r",
							"let check_dog = jsonData.family.pets.dog\r",
							"console.log(check_dog)\r",
							"pm.test(\"Dog has name properties\", function () {\r",
							"    pm.expect(check_dog).to.have.property(\"name\")\r",
							"});\r",
							"\r",
							"// Проверить, что у параметра dog есть параметры age\r",
							"pm.test(\"Dog has age properties\", function () {\r",
							"    pm.expect(check_dog).to.have.property(\"age\")\r",
							"});\r",
							"\r",
							"// Проверить, что параметр name имеет значение Luky\r",
							"let dog_name = jsonData.family.pets.dog.name\r",
							"pm.test(\"Name has Luky properties\", function () {\r",
							"    pm.expect(dog_name).to.eql(\"Luky\")\r",
							"});\r",
							"\r",
							"// Проверить, что параметр age имеет значение 4.\r",
							"let dog_age = jsonData.family.pets.dog.age\r",
							"pm.test(\"Age has 4 properties\", function () {\r",
							"    pm.expect(dog_age).to.eql(4)\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "{{url}}:{{port}}/object_info_3?age=35&salary=2000&name=Alex",
					"host": [
						"{{url}}"
					],
					"port": "{{port}}",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "age",
							"value": "35"
						},
						{
							"key": "salary",
							"value": "2000"
						},
						{
							"key": "name",
							"value": "Alex"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Отправить запрос.\r",
							"// Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Спарсить response body в json\r",
							"let jsonData = pm.response.json()\r",
							"\r",
							"//Спарсить request\r",
							"let reqData = pm.request.url.query.toObject()\r",
							"\r",
							"// Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"let resp_name = jsonData.name\r",
							"let req_name = reqData.name\r",
							"pm.test(\"Check name\", function () {\r",
							"    pm.expect(resp_name).to.eql(req_name)\r",
							"});\r",
							"\r",
							"// Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"let resp_age = Number(jsonData.age)\r",
							"let req_age = Number(reqData.age)\r",
							"pm.test(\"Check age\", function () {\r",
							"    pm.expect(resp_age).to.eql(req_age)\r",
							"});\r",
							"\r",
							"// Вывести в консоль параметр salary из request.\r",
							"console.log(reqData.salary)\r",
							"\r",
							"// Вывести в консоль параметр salary из response.\r",
							"console.log(jsonData.salary)\r",
							"\r",
							"// Вывести в консоль 0-й элемент параметра salary из response\r",
							"console.log(jsonData.salary[0])\r",
							"\r",
							"// Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"console.log(jsonData.salary[1])\r",
							"\r",
							"// Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"console.log(jsonData.salary[2])\r",
							"\r",
							"// Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"Check salary 0\", function () {\r",
							"    pm.expect(+jsonData.salary[0]).to.eql(+reqData.salary)\r",
							"});\r",
							"\r",
							"// Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"Check salary 1\", function () {\r",
							"    pm.expect(+jsonData.salary[1]).to.eql(+reqData.salary*2)\r",
							"});\r",
							"\r",
							"// Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"pm.test(\"Check salary 2\", function () {\r",
							"    pm.expect(+jsonData.salary[2]).to.eql(+reqData.salary*3)\r",
							"});\r",
							"\r",
							"//  Создать в окружении переменную name\r",
							"// Передать в окружение переменную name\r",
							"pm.environment.set(\"name\", \"Tanya\");\r",
							"\r",
							"//  Создать в окружении переменную age\r",
							"// Передать в окружение переменную age\r",
							"pm.environment.set(\"age\", \"33\");\r",
							"\r",
							"//  Создать в окружении переменную salary\r",
							"// Передать в окружение переменную salary\r",
							"pm.environment.set(\"salary\", \"1500\");\r",
							"\r",
							"// Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"jsonData.salary.forEach(element => console.log(element))\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "{{url}}:{{port}}/object_info_4?age=35&salary=2000&name=Alex",
					"host": [
						"{{url}}"
					],
					"port": "{{port}}",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "age",
							"value": "35"
						},
						{
							"key": "salary",
							"value": "2000"
						},
						{
							"key": "name",
							"value": "Alex"
						}
					]
				}
			},
			"response": []
		}
	]
}